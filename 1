import numpy as np
import torch
from torch import nn
from torch import optim
import matplotlib.pyplot as plt
from torchvision import datasets, transforms, models
import torch.nn.functional as F
from collections import OrderedDict
import json
from torch.autograd import Variable
import argparse
import os
import argparse
def args_paser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--save_dir', help='path of checkpoint')
    parser.add_argument('--arch', default='vgg11', help='choice of pytorch model')
    parser.add_argument('--lr', type=float, default=0.001)
    parser.add_argument('--hidden_units', type=int, default=1024)
    parser.add_argument('--epochs', type=int, default=5)
    parser.add_argument('--gpu', action='store_true')
    args = parser.parse_args()
    
    return args
def process_data(train_dir, test_dir, valid_dir):
#Define your transforms for the training, validation, and testing sets
    train_transforms = transforms.Compose([transforms.RandomRotation(30),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.ToTensor(),
                                       transforms.Normalize([0.485, 0.456, 0.406], 
                                                            [0.229, 0.224, 0.225])]) 
    test_transforms = transforms.Compose([transforms.Resize(255),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize([0.485, 0.456, 0.406], 
                                                            [0.229, 0.224, 0.225])]) 
    
    valid_transforms = transforms.Compose([transforms.Resize(255),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize([0.485, 0.456, 0.406], 
                                                            [0.229, 0.224, 0.225])]) 
    
    
    # TODO: Load the datasets with ImageFolder
    train_data = datasets.ImageFolder(train_dir, transform=train_transforms)
    test_data = datasets.ImageFolder(valid_dir, transform=test_transforms)
    valid_data = datasets.ImageFolder(test_dir, transform=valid_transforms)
# TODO: Using the image datasets and the trainforms, define the dataloaders
    train_loader = torch.utils.data.DataLoader(train_data, batch_size=32, shuffle=True)
    test_loader = torch.utils.data.DataLoader(test_data, batch_size=32, shuffle=True)
    valid_loader = torch.utils.data.DataLoader(valid_data, batch_size=32, shuffle=True)
    #return dataloaders[0], dataloaders[1], dataloaders[2]
    #return train_data, test_data, valid_data
    return train_loader, test_loader, valid_loader, train_data
    

  
def basic_model(arch):
# Load pretrained_network
    if arch == None or arch == 'vgg':
        load_model = models.vgg11(pretrained=True)
        print('Use vgg11')
    else:
        print('Please vgg11 or desnenet only, defaulting to vgg11')
        load_model = models.vgg11(pretrained=True)
    
    return load_model
def set_classifier(model, hidden_units):
    if hidden_units == None:
        hidden_units = 1024
    input = model.classifier[0].in_features
    
    model.classifier =  nn.Sequential(nn.Linear(input, hidden_units),
                                 nn.ReLU(),
                                 nn.Dropout(0.2),
                                 nn.Linear(hidden_units, 102),
                                 nn.LogSoftmax(dim=1))
    model.__name__ = model.__module__.split('.')[-1]
    return model
    print(f"Epoch {epoch+1}/{epochs}.. "
          f"Train loss: {running_loss/print_every:.3f}.. ")
    
def train_model(epochs, train_loader, valid_loader,gpu,model,optimizer,criterion):
    if type(epochs) == type(None):
        epochs = 10
        print("Epochs = 10")
    steps = 0
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    device
    model.to(device)
    running_loss = 0
    print_every = 60
    for epoch in range(epochs):
        for inputs, labels in train_loader:
            steps += 1
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            logps = model.forward(inputs)
            loss = criterion(logps, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
            if steps % print_every == 0:
                test_loss = 0
                accuracy = 0
                model.eval()
                        
                with torch.no_grad():
                    for inputs, labels in valid_loader:
                        inputs, labels = inputs.to(device), labels.to(device)
                        logps = model.forward(inputs)
                        batch_loss = criterion(logps, labels)
                        
                        test_loss += batch_loss.item()
                        # Calculate accuracy
                        ps = torch.exp(logps)
                        top_p, top_class = ps.topk(1, dim=1)
                        equals = top_class == labels.view(*top_class.shape)
                        accuracy += torch.mean(equals.type(torch.FloatTensor)).item()
                        print(f"Epoch {epoch+1}/{epochs}.. "
                          f"Train loss: {running_loss/print_every:.3f}.. "
                          f"Valid loss: {test_loss/len(valid_loader):.3f}.."
                          f"Valid accuracy: {accuracy/len(valid_loader):.3f}")
                    running_loss = 0
                model.train()
    return model
def valid_model(model, test_loader, gpu, criterion):
    test_loss = 0
    accuracy = 0
    model.eval()
    
    #below two lines are new
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
 #device = "cuda:0" if torch.cuda.is_available() else "cpu"
    model.to(device)
    with torch.no_grad():
        for inputs, labels in test_loader:
            inputs, labels = inputs.to(device), labels.to(device)
                #inputs, labels = inputs.to('cuda'), labels.to('cuda')
            logps = model.forward(inputs)
            batch_loss = criterion(logps, labels)
            test_loss += batch_loss.item()
            # Calculate accuracy
            ps = torch.exp(logps)
            top_p, top_class = ps.topk(1, dim=1)
            equals = top_class == labels.view(*top_class.shape)
            accuracy += torch.mean(equals.type(torch.FloatTensor)).item()
            
#def save_checkpoint(model, train_data, save_dir):
def save_checkpoint(model, train_data, save_dir):
    checkpoint = {'state_dict': model.state_dict()}
    torch.save(checkpoint, 'checkpoint.pth')
    model.class_to_idx = train_data.class_to_idx
    
    checkpoint = {'input_size': 25088,
                'output_size': 102,
                'hidden_layer_size': 512,
                'dropout': 0.2,
                'state_dict': model.state_dict(),
                'architecture': "vgg11",
                #in your proposal there was no classifier, I added it after receiving the error running predict.py
                 'classifier': model.classifier,
                #'class_to_idx': image_datasets['train'].class_to_idx,(this code did not work)
                'state_dict': model.state_dict(),
                'class_to_idx': train_data.class_to_idx,
                'epochs': 5,
                #'optimizer': optimizer.state_dict
                 }
    torch.save(checkpoint, 'checkpoint.pth')
def main():
    args = args_paser()
    data_dir = 'flowers'
    train_dir = data_dir + '/train'
    valid_dir = data_dir + '/valid'
    test_dir = data_dir + '/test'
    train_loader,valid_loader, test_loader, train_data = process_data(train_dir, test_dir, valid_dir)
       
    model = basic_model(args.arch)
    print(model)
    for param in model.parameters():
        param.requires_grad = False
    model = set_classifier(model, args.hidden_units)
    criterion = nn.NLLLoss()
    optimizer = optim.Adam(model.classifier.parameters(), lr=args.lr)
    trmodel = train_model(args.epochs,train_loader, valid_loader, args.gpu,model,optimizer,criterion)
    valid_model(trmodel, test_loader, args.gpu, criterion)
    #does this define the train_datasets?
    
   # model.class_to_idx = train_data.class_to_idx
    save_checkpoint(trmodel, train_data, args.save_dir)
    #save_checkpoint(trmodel, trainloaders, args.save_dir)
    print('Completed!')
if __name__ == '__main__': main()
